
     * Queries the virtual speaker angles (azimuth and elevation) for a combination of a channel
     * mask and virtualization mode.
     * If the virtualization configuration (mask and mode) is supported (see
     * {@link #canVirtualize(int, int)}, the array angles will contain upon return the
     * definition of each virtual speaker and its azimuth and elevation angles relative to the
     * listener.
     * <br>Note that in some virtualizer implementations, the angles may be strength-dependent.
     * @param inputChannelMask the channel mask of the content to virtualize.
     * @param virtualizationMode the mode for which virtualization processing is to be performed,
     *    one of {@link #VIRTUALIZATION_MODE_BINAURAL}, {@link #VIRTUALIZATION_MODE_TRANSAURAL}.
     * @param angles a non-null array whose length is 3 times the number of channels in the channel
     *    mask.
     *    If the method indicates the configuration is supported, the array will contain upon return
     *    triplets of values: for each channel <code>i</code> among the channels of the mask:
     *    <ul>
     *      <li>the element at index <code>3*i</code> in the array contains the speaker
     *          identification (e.g. {@link AudioFormat#CHANNEL_OUT_FRONT_LEFT}),</li>
     *      <li>the element at index <code>3*i+1</code> contains its corresponding azimuth angle
     *          expressed in degrees, where 0 is the direction the listener faces, 180 is behind
     *          the listener, and -90 is to her/his left,</li>
     *      <li>the element at index <code>3*i+2</code> contains its corresponding elevation angle
     *          where +90 is directly above the listener, 0 is the horizontal plane, and -90 is
     *          directly below the listener.</li>
     * @return true if the combination of channel mask and virtualization mode is supported, false
     *    otherwise.
     * @throws IllegalStateException
     * @throws IllegalArgumentException
     * @throws UnsupportedOperationException
     