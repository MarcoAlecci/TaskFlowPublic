
     * Returns a {@code BigInteger} whose value is {@code
     * pow(this, exponent) mod modulus}. The modulus must be positive. The
     * result is guaranteed to be in the interval {@code [0, modulus)}.
     * If the exponent is negative, then
     * {@code pow(this.modInverse(modulus), -exponent) mod modulus} is computed.
     * The inverse of this only exists if {@code this} is relatively prime to the modulus,
     * otherwise an exception is thrown.
     *
     * @throws NullPointerException if {@code modulus == null} or {@code exponent == null}.
     * @throws ArithmeticException if {@code modulus < 0} or if {@code exponent < 0} and
     *     not relatively prime to {@code modulus}.
     