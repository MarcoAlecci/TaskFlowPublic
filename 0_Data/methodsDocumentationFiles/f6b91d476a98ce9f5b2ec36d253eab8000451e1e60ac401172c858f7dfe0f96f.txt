
     * Adds a {@code View} to the overlay. The bounds of the added view should be
     * relative to the host view. Any view added to the overlay should be
     * removed when it is no longer needed or no longer visible.
     *
     * <p>Views in the overlay are visual-only; they do not receive input
     * events and do not participate in focus traversal. Overlay views
     * are intended to be transient, such as might be needed by a temporary
     * animation effect.</p>
     *
     * <p>If the view has a parent, the view will be removed from that parent
     * before being added to the overlay. Also, if that parent is attached
     * in the current view hierarchy, the view will be repositioned
     * such that it is in the same relative location inside the activity. For
     * example, if the view's current parent lies 100 pixels to the right
     * and 200 pixels down from the origin of the overlay's
     * host view, then the view will be offset by (100, 200).</p>
     *
     * <p>{@code View}s added with this API will be drawn in the order they were
     * added. Drawing of the overlay views will happen before drawing of any of the
     * {@code Drawable}s added with {@link #add(Drawable)} API even if a call to
     * this API happened after the call to {@link #add(Drawable)}.</p>
     *
     * <p>Passing <code>null</code> parameter will result in an
     * {@link IllegalArgumentException} being thrown.</p>
     *
     * @param view The {@code View} to be added to the overlay. The added view will be
     * drawn when the overlay is drawn.
     * @see #remove(View)
     * @see ViewOverlay#add(Drawable)
     