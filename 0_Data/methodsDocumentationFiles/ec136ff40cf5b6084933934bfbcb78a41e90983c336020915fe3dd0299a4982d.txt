
     * Calculates field classification scores in a batch.
     *
     * <p>A field classification score is a {@code float} representing how well an
     * {@link AutofillValue} matches a expected value predicted by an autofill service
     * &mdash;a full match is {@code 1.0} (representing 100%), while a full mismatch is {@code 0.0}.
     *
     * <p>The exact score depends on the algorithm used to calculate it&mdash;the service must
     * provide at least one default algorithm (which is used when the algorithm is not specified
     * or is invalid), but it could provide more (in which case the algorithm name should be
     * specified by the caller when calculating the scores).
     *
     * <p>For example, if the service provides an algorithm named {@code EXACT_MATCH} that
     * returns {@code 1.0} if all characters match or {@code 0.0} otherwise, a call to:
     *
     * <pre>
     * HashMap algorithms = new HashMap<>();
     * algorithms.put("email", "EXACT_MATCH");
     * algorithms.put("phone", "EXACT_MATCH");
     *
     * HashMap args = new HashMap<>();
     * args.put("email", null);
     * args.put("phone", null);
     *
     * service.onCalculateScores(Arrays.asList(AutofillValue.forText("email1"),
     * AutofillValue.forText("PHONE1")), Arrays.asList("email1", "phone1"),
     * Array.asList("email", "phone"), algorithms, args);
     * </pre>
     *
     * <p>Returns:
     *
     * <pre>
     * [
     *   [1.0, 0.0], // "email1" compared against ["email1", "phone1"]
     *   [0.0, 0.0]  // "PHONE1" compared against ["email1", "phone1"]
     * ];
     * </pre>
     *
     * <p>If the same algorithm allows the caller to specify whether the comparisons should be
     * case sensitive by passing a boolean option named {@code "case_sensitive"}, then a call to:
     *
     * <pre>
     * Bundle algorithmOptions = new Bundle();
     * algorithmOptions.putBoolean("case_sensitive", false);
     * args.put("phone", algorithmOptions);
     *
     * service.onCalculateScores(Arrays.asList(AutofillValue.forText("email1"),
     * AutofillValue.forText("PHONE1")), Arrays.asList("email1", "phone1"),
     * Array.asList("email", "phone"), algorithms, args);
     * </pre>
     *
     * <p>Returns:
     *
     * <pre>
     * [
     *   [1.0, 0.0], // "email1" compared against ["email1", "phone1"]
     *   [0.0, 1.0]  // "PHONE1" compared against ["email1", "phone1"]
     * ];
     * </pre>
     *
     * @param actualValues values entered by the user.
     * @param userDataValues values predicted from the user data.
     * @param categoryIds category Ids correspoinding to userDataValues
     * @param defaultAlgorithm default field classification algorithm
     * @param algorithms array of field classification algorithms
     * @return the calculated scores of {@code actualValues} x {@code userDataValues}.
     *
     * {@hide}
     