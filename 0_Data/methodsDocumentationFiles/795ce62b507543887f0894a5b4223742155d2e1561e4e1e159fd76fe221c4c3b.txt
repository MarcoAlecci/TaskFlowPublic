
         * Called when an insets animation is about to start and before the views have been laid out
         * in the end state of the animation. The ordering of events during an insets animation is
         * the following:
         * <p>
         * <ul>
         *     <li>Application calls {@link WindowInsetsController#hide(int)},
         *     {@link WindowInsetsController#show(int)},
         *     {@link WindowInsetsController#controlWindowInsetsAnimation}</li>
         *     <li>onPrepare is called on the view hierarchy listeners</li>
         *     <li>{@link View#onApplyWindowInsets} will be called with the end state of the
         *     animation</li>
         *     <li>View hierarchy gets laid out according to the changes the application has
         *     requested due to the new insets being dispatched</li>
         *     <li>{@link #onStart} is called <em>before</em> the view
         *     hierarchy gets drawn in the new laid out state</li>
         *     <li>{@link #onProgress} is called immediately after with the animation start
         *     state</li>
         *     <li>The frame gets drawn.</li>
         * </ul>
         * <p>
         * This ordering allows the application to inspect the end state after the animation has
         * finished, and then revert to the starting state of the animation in the first
         * {@link #onProgress} callback by using post-layout view properties like {@link View#setX}
         * and related methods.
         * <p>
         * Note: If the animation is application controlled by using
         * {@link WindowInsetsController#controlWindowInsetsAnimation}, the end state of the
         * animation is undefined as the application may decide on the end state only by passing in
         * {@code shown} parameter when calling {@link WindowInsetsAnimationController#finish}. In
         * this situation, the system will dispatch the insets in the opposite visibility state
         * before the animation starts. Example: When controlling the input method with
         * {@link WindowInsetsController#controlWindowInsetsAnimation} and the input method is
         * currently showing, {@link View#onApplyWindowInsets} will receive a {@link WindowInsets}
         * instance for which {@link WindowInsets#isVisible} will return {@code false} for
         * {@link WindowInsets.Type#ime}.
         *
         * @param animation The animation that is about to start.
         